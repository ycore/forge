{
  "version": 3,
  "sources": ["../../../src/vite/plugins/workspace-resolver.ts"],
  "sourcesContent": [
    "import { readdirSync, readFileSync, statSync } from 'node:fs';\nimport { join, resolve } from 'node:path';\nimport type { Plugin } from 'vite';\n\nimport type { WorkspaceResolverOptions } from '../@types/workspace-resolver.types';\n\nexport function workspaceResolver(options: WorkspaceResolverOptions = {}): Plugin {\n  // Auto-derive workspace root - look for workspaces directory in current or parent directories\n  const findWorkspaceRoot = (): string => {\n    let cwd = process.cwd();\n\n    // Check current directory and parents for workspaces folder\n    while (cwd !== '/') {\n      const workspacesPath = join(cwd, 'workspaces');\n      try {\n        if (statSync(workspacesPath).isDirectory()) {\n          return workspacesPath;\n        }\n      } catch { }\n      cwd = resolve(cwd, '..');\n    }\n\n    // Fallback to conventional path from cwd\n    return join(process.cwd(), 'workspaces');\n  };\n\n  const defaultWorkspaceRoot = findWorkspaceRoot();\n  const defaultWorkspacePath = join(defaultWorkspaceRoot, ':PKG:/src/:SUBPATH:');\n\n  const { workspacePath = defaultWorkspacePath, exclude = true, workspaceDirs } = options;\n\n  const workspaceRoot = workspacePath.replace('/:PKG:/src/:SUBPATH:', '');\n\n  // Auto-derive prefix by scanning workspace packages\n  let prefix = options.prefix;\n  if (!prefix) {\n    prefix = derivePrefix();\n  }\n  const packageCache = new Map<string, { exports?: Record<string, unknown>;[key: string]: unknown }>();\n  const discoveredWorkspacePackages = new Set<string>();\n\n  function getPackageExports(pkgName: string) {\n    if (packageCache.has(pkgName)) {\n      return packageCache.get(pkgName);\n    }\n\n    try {\n      const packageJsonPath = join(workspaceRoot, pkgName, 'package.json');\n      const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n      const exports = packageJson.exports || {};\n      packageCache.set(pkgName, exports);\n      return exports;\n    } catch (_e) {\n      packageCache.set(pkgName, {});\n      return {};\n    }\n  }\n\n  function derivePrefix(): string {\n    try {\n      const discoveredDirs = getWorkspaceDirs();\n      for (const dir of discoveredDirs) {\n        try {\n          const packageJsonPath = join(workspaceRoot, dir, 'package.json');\n          const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n          if (packageJson.name?.includes('/')) {\n            const scope = packageJson.name.split('/')[0];\n            return `${scope}/`;\n          }\n        } catch { }\n      }\n    } catch {\n      // Fallback to common default\n    }\n    return '@workspace/';\n  }\n\n  function getWorkspaceDirs(): string[] {\n    if (workspaceDirs) {\n      return workspaceDirs;\n    }\n\n    try {\n      // Auto-discover workspace directories\n      const entries = readdirSync(workspaceRoot);\n      return entries.filter(entry => {\n        try {\n          const fullPath = join(workspaceRoot, entry);\n          const stat = statSync(fullPath);\n          if (!stat.isDirectory()) return false;\n\n          // Check if directory contains package.json\n          const packageJsonPath = join(fullPath, 'package.json');\n          return statSync(packageJsonPath).isFile();\n        } catch {\n          return false;\n        }\n      });\n    } catch {\n      return [];\n    }\n  }\n\n  function discoverWorkspacePackages() {\n    const workspacePackages: string[] = [];\n\n    try {\n      const discoveredWorkspaceDirs = getWorkspaceDirs();\n\n      for (const dir of discoveredWorkspaceDirs) {\n        try {\n          const packageJsonPath = join(workspaceRoot, dir, 'package.json');\n          const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));\n          if (packageJson.name?.startsWith(prefix?.replace(/\\/$/, ''))) {\n            const exports = packageJson.exports || {};\n\n            // Add main package\n            workspacePackages.push(packageJson.name);\n\n            // Add all sub-exports\n            for (const exportKey of Object.keys(exports)) {\n              if (exportKey !== './package.json' && exportKey !== '.') {\n                const fullExportName = `${packageJson.name}${exportKey.replace('.', '')}`;\n                workspacePackages.push(fullExportName);\n              }\n            }\n          }\n        } catch (_e) {\n          // Skip if package.json doesn't exist or is invalid\n        }\n      }\n    } catch (_e) {\n      // Fallback to empty array if discovery fails\n    }\n\n    return workspacePackages;\n  }\n\n  return {\n    name: 'workspace-resolver',\n\n    configResolved(config) {\n      if (exclude) {\n        const workspacePackages = discoverWorkspacePackages();\n\n        // Ensure optimizeDeps.exclude exists\n        if (!config.optimizeDeps) {\n          // biome-ignore lint/suspicious/noExplicitAny: acceptable\n          (config as any).optimizeDeps = {};\n        }\n        if (!config.optimizeDeps.exclude) {\n          config.optimizeDeps.exclude = [];\n        }\n\n        // Add workspace packages to exclude list (only workspace packages, not their dependencies)\n        for (const pkg of workspacePackages) {\n          if (!config.optimizeDeps.exclude.includes(pkg)) {\n            config.optimizeDeps.exclude.push(pkg);\n          }\n        }\n\n        console.info(`[workspace-resolver] Excluded ${workspacePackages.length} workspace packages from optimization`);\n        console.info('[workspace-resolver] All dependencies will be pre-bundled normally by Vite');\n      }\n    },\n\n    resolveId(id) {\n      if (id.startsWith(prefix)) {\n        try {\n          const [_scope, pkg = '', ...subpath] = id.split('/');\n          discoveredWorkspacePackages.add(`${prefix.replace(/\\/$/, '')}/${pkg}`);\n\n          const packageExports = getPackageExports(pkg);\n\n          // Reconstruct the export key\n          const exportKey = subpath.length > 0 ? `./${subpath.join('/')}` : '.';\n\n          // Check if this exact export exists\n          if (packageExports[exportKey]) {\n            const exportValue = packageExports[exportKey];\n            let sourcePath: string | undefined;\n\n            if (typeof exportValue === 'string') {\n              sourcePath = exportValue;\n            } else if (typeof exportValue === 'object' && exportValue && 'default' in exportValue) {\n              sourcePath = exportValue.default;\n            }\n\n            if (sourcePath?.startsWith('./src/')) {\n              const resolvedPath = resolve(workspaceRoot, pkg, sourcePath.replace('./', ''));\n              // Verify the resolved path exists before returning\n              try {\n                statSync(resolvedPath);\n                return resolvedPath;\n              } catch {\n                // Fall through to fallback resolution\n              }\n            }\n          }\n\n          // Fallback to basic path resolution for files not in exports\n          const fallbackPath = join(workspaceRoot, pkg, 'src', subpath.join('/'));\n\n          // If no subpath, try to find index file\n          if (subpath.length === 0) {\n            return `${fallbackPath}/index.ts`;\n          }\n\n          return fallbackPath;\n        } catch (error) {\n          // Log error but don't throw - let Vite handle the resolution failure\n          console.warn(`[workspace-resolver] Failed to resolve ${id}:`, error);\n          return null;\n        }\n      }\n    },\n  };\n}\n"
  ],
  "mappings": ";AAAA;AACA;AAKO,SAAS,iBAAiB,CAAC,UAAoC,CAAC,GAAW;AAAA,EAEhF,MAAM,oBAAoB,MAAc;AAAA,IACtC,IAAI,MAAM,QAAQ,IAAI;AAAA,IAGtB,OAAO,QAAQ,KAAK;AAAA,MAClB,MAAM,iBAAiB,KAAK,KAAK,YAAY;AAAA,MAC7C,IAAI;AAAA,QACF,IAAI,SAAS,cAAc,EAAE,YAAY,GAAG;AAAA,UAC1C,OAAO;AAAA,QACT;AAAA,QACA,MAAM;AAAA,MACR,MAAM,QAAQ,KAAK,IAAI;AAAA,IACzB;AAAA,IAGA,OAAO,KAAK,QAAQ,IAAI,GAAG,YAAY;AAAA;AAAA,EAGzC,MAAM,uBAAuB,kBAAkB;AAAA,EAC/C,MAAM,uBAAuB,KAAK,sBAAsB,qBAAqB;AAAA,EAE7E,QAAQ,gBAAgB,sBAAsB,UAAU,MAAM,kBAAkB;AAAA,EAEhF,MAAM,gBAAgB,cAAc,QAAQ,wBAAwB,EAAE;AAAA,EAGtE,IAAI,SAAS,QAAQ;AAAA,EACrB,KAAK,QAAQ;AAAA,IACX,SAAS,aAAa;AAAA,EACxB;AAAA,EACA,MAAM,eAAe,IAAI;AAAA,EACzB,MAAM,8BAA8B,IAAI;AAAA,EAExC,SAAS,iBAAiB,CAAC,SAAiB;AAAA,IAC1C,IAAI,aAAa,IAAI,OAAO,GAAG;AAAA,MAC7B,OAAO,aAAa,IAAI,OAAO;AAAA,IACjC;AAAA,IAEA,IAAI;AAAA,MACF,MAAM,kBAAkB,KAAK,eAAe,SAAS,cAAc;AAAA,MACnE,MAAM,cAAc,KAAK,MAAM,aAAa,iBAAiB,OAAO,CAAC;AAAA,MACrE,MAAM,UAAU,YAAY,WAAW,CAAC;AAAA,MACxC,aAAa,IAAI,SAAS,OAAO;AAAA,MACjC,OAAO;AAAA,MACP,OAAO,IAAI;AAAA,MACX,aAAa,IAAI,SAAS,CAAC,CAAC;AAAA,MAC5B,OAAO,CAAC;AAAA;AAAA;AAAA,EAIZ,SAAS,YAAY,GAAW;AAAA,IAC9B,IAAI;AAAA,MACF,MAAM,iBAAiB,iBAAiB;AAAA,MACxC,WAAW,OAAO,gBAAgB;AAAA,QAChC,IAAI;AAAA,UACF,MAAM,kBAAkB,KAAK,eAAe,KAAK,cAAc;AAAA,UAC/D,MAAM,cAAc,KAAK,MAAM,aAAa,iBAAiB,OAAO,CAAC;AAAA,UACrE,IAAI,YAAY,MAAM,SAAS,GAAG,GAAG;AAAA,YACnC,MAAM,QAAQ,YAAY,KAAK,MAAM,GAAG,EAAE;AAAA,YAC1C,OAAO,GAAG;AAAA,UACZ;AAAA,UACA,MAAM;AAAA,MACV;AAAA,MACA,MAAM;AAAA,IAGR,OAAO;AAAA;AAAA,EAGT,SAAS,gBAAgB,GAAa;AAAA,IACpC,IAAI,eAAe;AAAA,MACjB,OAAO;AAAA,IACT;AAAA,IAEA,IAAI;AAAA,MAEF,MAAM,UAAU,YAAY,aAAa;AAAA,MACzC,OAAO,QAAQ,OAAO,WAAS;AAAA,QAC7B,IAAI;AAAA,UACF,MAAM,WAAW,KAAK,eAAe,KAAK;AAAA,UAC1C,MAAM,OAAO,SAAS,QAAQ;AAAA,UAC9B,KAAK,KAAK,YAAY;AAAA,YAAG,OAAO;AAAA,UAGhC,MAAM,kBAAkB,KAAK,UAAU,cAAc;AAAA,UACrD,OAAO,SAAS,eAAe,EAAE,OAAO;AAAA,UACxC,MAAM;AAAA,UACN,OAAO;AAAA;AAAA,OAEV;AAAA,MACD,MAAM;AAAA,MACN,OAAO,CAAC;AAAA;AAAA;AAAA,EAIZ,SAAS,yBAAyB,GAAG;AAAA,IACnC,MAAM,oBAA8B,CAAC;AAAA,IAErC,IAAI;AAAA,MACF,MAAM,0BAA0B,iBAAiB;AAAA,MAEjD,WAAW,OAAO,yBAAyB;AAAA,QACzC,IAAI;AAAA,UACF,MAAM,kBAAkB,KAAK,eAAe,KAAK,cAAc;AAAA,UAC/D,MAAM,cAAc,KAAK,MAAM,aAAa,iBAAiB,OAAO,CAAC;AAAA,UACrE,IAAI,YAAY,MAAM,WAAW,QAAQ,QAAQ,OAAO,EAAE,CAAC,GAAG;AAAA,YAC5D,MAAM,UAAU,YAAY,WAAW,CAAC;AAAA,YAGxC,kBAAkB,KAAK,YAAY,IAAI;AAAA,YAGvC,WAAW,aAAa,OAAO,KAAK,OAAO,GAAG;AAAA,cAC5C,IAAI,cAAc,oBAAoB,cAAc,KAAK;AAAA,gBACvD,MAAM,iBAAiB,GAAG,YAAY,OAAO,UAAU,QAAQ,KAAK,EAAE;AAAA,gBACtE,kBAAkB,KAAK,cAAc;AAAA,cACvC;AAAA,YACF;AAAA,UACF;AAAA,UACA,OAAO,IAAI;AAAA,MAGf;AAAA,MACA,OAAO,IAAI;AAAA,IAIb,OAAO;AAAA;AAAA,EAGT,OAAO;AAAA,IACL,MAAM;AAAA,IAEN,cAAc,CAAC,QAAQ;AAAA,MACrB,IAAI,SAAS;AAAA,QACX,MAAM,oBAAoB,0BAA0B;AAAA,QAGpD,KAAK,OAAO,cAAc;AAAA,UAEvB,OAAe,eAAe,CAAC;AAAA,QAClC;AAAA,QACA,KAAK,OAAO,aAAa,SAAS;AAAA,UAChC,OAAO,aAAa,UAAU,CAAC;AAAA,QACjC;AAAA,QAGA,WAAW,OAAO,mBAAmB;AAAA,UACnC,KAAK,OAAO,aAAa,QAAQ,SAAS,GAAG,GAAG;AAAA,YAC9C,OAAO,aAAa,QAAQ,KAAK,GAAG;AAAA,UACtC;AAAA,QACF;AAAA,QAEA,QAAQ,KAAK,iCAAiC,kBAAkB,6CAA6C;AAAA,QAC7G,QAAQ,KAAK,4EAA4E;AAAA,MAC3F;AAAA;AAAA,IAGF,SAAS,CAAC,IAAI;AAAA,MACZ,IAAI,GAAG,WAAW,MAAM,GAAG;AAAA,QACzB,IAAI;AAAA,UACF,OAAO,QAAQ,MAAM,OAAO,WAAW,GAAG,MAAM,GAAG;AAAA,UACnD,4BAA4B,IAAI,GAAG,OAAO,QAAQ,OAAO,EAAE,KAAK,KAAK;AAAA,UAErE,MAAM,iBAAiB,kBAAkB,GAAG;AAAA,UAG5C,MAAM,YAAY,QAAQ,SAAS,IAAI,KAAK,QAAQ,KAAK,GAAG,MAAM;AAAA,UAGlE,IAAI,eAAe,YAAY;AAAA,YAC7B,MAAM,cAAc,eAAe;AAAA,YACnC,IAAI;AAAA,YAEJ,IAAI,OAAO,gBAAgB,UAAU;AAAA,cACnC,aAAa;AAAA,YACf,EAAO,SAAI,OAAO,gBAAgB,YAAY,eAAe,aAAa,aAAa;AAAA,cACrF,aAAa,YAAY;AAAA,YAC3B;AAAA,YAEA,IAAI,YAAY,WAAW,QAAQ,GAAG;AAAA,cACpC,MAAM,eAAe,QAAQ,eAAe,KAAK,WAAW,QAAQ,MAAM,EAAE,CAAC;AAAA,cAE7E,IAAI;AAAA,gBACF,SAAS,YAAY;AAAA,gBACrB,OAAO;AAAA,gBACP,MAAM;AAAA,YAGV;AAAA,UACF;AAAA,UAGA,MAAM,eAAe,KAAK,eAAe,KAAK,OAAO,QAAQ,KAAK,GAAG,CAAC;AAAA,UAGtE,IAAI,QAAQ,WAAW,GAAG;AAAA,YACxB,OAAO,GAAG;AAAA,UACZ;AAAA,UAEA,OAAO;AAAA,UACP,OAAO,OAAO;AAAA,UAEd,QAAQ,KAAK,0CAA0C,OAAO,KAAK;AAAA,UACnE,OAAO;AAAA;AAAA,MAEX;AAAA;AAAA,EAEJ;AAAA;",
  "debugId": "023EEA54BF24439664756E2164756E21",
  "names": []
}