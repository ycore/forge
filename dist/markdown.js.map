{
  "version": 3,
  "sources": ["../src/markdown/markdown-loader.tsx", "../src/markdown/routes/markdown.tsx", "url-asset:@ycore/componentry/shadcn-ui/assets/lucide-sprites.svg", "../src/markdown/markdown-data.ts", "../src/markdown/routes/markdown.$slug.tsx"],
  "sourcesContent": [
    "interface MarkdownProps {\n  children: string;\n  className?: string;\n}\n\nexport interface MarkdownContent {\n  frontmatter: Record<string, any>;\n  content: string;\n}\n\nexport interface MarkdownMeta {\n  slug: string;\n  title?: string;\n  description?: string;\n  date?: string;\n  [key: string]: any;\n}\n\nexport function Markdown({ children, className = '' }: MarkdownProps) {\n  if (!children || typeof children !== 'string') {\n    return <div className={className} />;\n  }\n\n  // biome-ignore lint/security/noDangerouslySetInnerHtml: Content is pre-sanitized at build time\n  return <div className={className} dangerouslySetInnerHTML={{ __html: children }} />;\n}\n",
    "/** biome-ignore-all lint/a11y/noSvgWithoutTitle: acceptable */\nimport { createSpriteIcon } from '@ycore/componentry/images';\nimport { LoadingBar, THEME_OPTIONS, ThemeSwitch } from '@ycore/componentry/impetus';\nimport type { IconName } from '@ycore/componentry/shadcn-ui';\nimport svgSpriteUrl from '@ycore/componentry/shadcn-ui/assets/lucide-sprites.svg?url';\nimport clsx from 'clsx';\nimport { memo, useCallback, useEffect, useState } from 'react';\nimport { useFetcher, useLocation } from 'react-router';\nimport { getMarkdownManifest } from '../markdown-data';\nimport type { MarkdownMeta } from '../markdown-loader';\nimport { Markdown } from '../markdown-loader';\n\nconst SpriteIcon = createSpriteIcon<IconName>(svgSpriteUrl);\n\n// Type definitions\ninterface DocContent {\n  content: string;\n  frontmatter: Record<string, any>;\n  slug: string;\n}\n\ninterface EnhancedMarkdownMeta extends MarkdownMeta {\n  formattedDate?: string;\n}\n\n// Type guard\nconst isDocContent = (data: unknown): data is DocContent => {\n  return typeof data === 'object' && data !== null && 'content' in data && 'frontmatter' in data && 'slug' in data;\n};\n\nexport const routesTemplate = {\n  docs: (slug: string) => `/docs#${slug}`,\n  docsApi: (slug: string) => `/docs/${slug}?api`,\n};\n\n// Loader that returns the manifest data as-is\nexport async function loader({ request }: { request: Request }): Promise<EnhancedMarkdownMeta[]> {\n  const manifest = await getMarkdownManifest(request);\n  return manifest as EnhancedMarkdownMeta[];\n}\n\ninterface ComponentProps {\n  loaderData: EnhancedMarkdownMeta[];\n}\n\nexport default function MarkdownPage({ loaderData }: ComponentProps) {\n  const docs = loaderData;\n  const location = useLocation();\n  const [selectedDoc, setSelectedDoc] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const fetcher = useFetcher();\n\n  const handleDocSelect = useCallback(\n    (slug: string) => {\n      if (selectedDoc === slug) return;\n      setSelectedDoc(slug);\n      setError(null);\n      fetcher.load(routesTemplate.docsApi(slug));\n      window.history.replaceState(null, '', routesTemplate.docs(slug));\n    },\n    [fetcher.load, selectedDoc]\n  );\n\n  // Initialize from URL hash on mount only\n  useEffect(() => {\n    const hash = location.hash.slice(1);\n    if (hash && docs.find((doc: EnhancedMarkdownMeta) => doc.slug === hash) && !selectedDoc) {\n      setSelectedDoc(hash);\n      fetcher.load(routesTemplate.docsApi(hash));\n    }\n  }, [docs, fetcher.load, selectedDoc, location.hash.slice]);\n\n  // Handle browser back/forward navigation\n  useEffect(() => {\n    const handlePopState = () => {\n      const hash = window.location.hash.slice(1);\n      if (hash && docs.find((doc: EnhancedMarkdownMeta) => doc.slug === hash)) {\n        setSelectedDoc(hash);\n        setError(null);\n        fetcher.load(routesTemplate.docsApi(hash));\n      } else {\n        setSelectedDoc(null);\n        setError(null);\n      }\n    };\n\n    window.addEventListener('popstate', handlePopState);\n    return () => window.removeEventListener('popstate', handlePopState);\n  }, [docs, fetcher.load]);\n\n  // Handle fetch errors\n  useEffect(() => {\n    if (fetcher.state === 'idle' && fetcher.data && !isDocContent(fetcher.data)) {\n      setError('Failed to load document');\n    }\n  }, [fetcher.state, fetcher.data]);\n\n  const currentDoc = isDocContent(fetcher.data) ? fetcher.data : undefined;\n\n  return (\n    <div className=\"min-h-screen bg-white transition-colors dark:bg-gray-900\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside\n          className={`fixed inset-y-0 top-0 left-0 z-20 overflow-y-auto border-gray-200 border-r bg-white transition-transform duration-300 dark:border-gray-800 dark:bg-gray-900 ${sidebarCollapsed ? '-translate-x-full' : 'translate-x-0'} w-80`}\n        >\n          <div className=\"p-6\">\n            <div className=\"mb-6 flex items-center justify-between\">\n              <h2 className=\"font-semibold text-gray-900 text-lg dark:text-white\">Documentation</h2>\n              <div>\n                <button type=\"button\" onClick={() => setSidebarCollapsed(!sidebarCollapsed)} className=\"rounded-md p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\">\n                  <SpriteIcon id=\"ChevronLeft\" className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n            <nav className=\"space-y-1\" aria-label=\"Documentation navigation\">\n              {docs.length === 0 ? <DocListEmpty /> : <DocList docs={docs} selectedDoc={selectedDoc} onDocSelect={handleDocSelect} />}\n            </nav>\n            <div className=\"fixed right-4 bottom-4 z-10\">\n              <ThemeSwitch theme={THEME_OPTIONS} className=\"size-3\" classTheme=\"size-3\" />\n            </div>\n          </div>\n        </aside>\n\n        {/* Sidebar toggle button - visible when sidebar is collapsed */}\n        <button\n          type=\"button\"\n          onClick={() => setSidebarCollapsed(false)}\n          className={`fixed top-4 left-4 z-30 rounded-md border border-gray-200 bg-white p-2 text-gray-500 shadow-sm transition-opacity duration-300 hover:text-gray-700 dark:border-gray-800 dark:bg-gray-900 dark:text-gray-400 dark:hover:text-gray-200 ${sidebarCollapsed ? 'opacity-100' : 'pointer-events-none opacity-0'}`}\n        >\n          <SpriteIcon id=\"EllipsisVertical\" className=\"h-5 w-5\" />\n        </button>\n\n        {/* Main content */}\n        <main className={`flex-1 transition-all duration-300 ${sidebarCollapsed ? 'pl-0' : 'pl-64'}`}>\n          <div className=\"mx-auto max-w-4xl\">\n            {!selectedDoc ? (\n              <div className=\"flex h-96 items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"mb-4 text-gray-400 dark:text-gray-500\">\n                    <SpriteIcon id=\"CircleAlert\" className=\"h-8 w-8\" />\n                  </div>\n                  <h3 className=\"mb-2 font-medium text-gray-900 text-lg dark:text-white\">Select a document</h3>\n                  <p className=\"text-gray-500 dark:text-gray-400\">Choose a document from the sidebar to view its content.</p>\n                </div>\n              </div>\n            ) : fetcher.state === 'loading' ? (\n              <LoadingBar />\n            ) : error ? (\n              <DocumentNotFound />\n            ) : currentDoc ? (\n              <article className=\"markdown-content px-8 py-12\">\n                <DocumentHeader frontmatter={currentDoc.frontmatter} />\n                <Markdown className=\"max-w-none\">{currentDoc.content}</Markdown>\n              </article>\n            ) : (\n              <DocumentNotFound />\n            )}\n          </div>\n        </main>\n      </div >\n    </div >\n  )\n}\n\nconst DocListEmpty = () => {\n  return <p className=\"text-gray-500 text-sm dark:text-gray-400\">No documentation found.</p>;\n};\n\n// Memoized components\n// const LoadingBar = memo(() => <div className=\"loading-bar\" />);\n\nconst DocumentNotFound = memo(() => (\n  <div className=\"flex h-96 items-center justify-center\">\n    <div className=\"text-center\">\n      <div className=\"mb-4 text-red-400 dark:text-red-500\">\n        <SpriteIcon id=\"CircleAlert\" className=\"mx-auto h-8 w-8\" />\n      </div>\n      <h3 className=\"mb-2 font-medium text-gray-900 text-lg dark:text-white\">Document not found</h3>\n      <p className=\"text-gray-500 dark:text-gray-400\">The selected document could not be loaded.</p>\n    </div>\n  </div>\n));\n\nconst DocumentHeader = memo(({ frontmatter }: { frontmatter: Record<string, any> }) => (\n  <header className=\"mb-8\">\n    {frontmatter.title && <h1 className=\"mb-4 font-bold font-serif text-3xl text-gray-900 dark:text-white\">{frontmatter.title}</h1>}\n    {frontmatter.description && <p className=\"mb-4 font-serif text-gray-600 text-lg dark:text-gray-300\">{frontmatter.description}</p>}\n    {(frontmatter.formattedDate || frontmatter.version) && (\n      <div className=\"flex items-center justify-between text-gray-500 text-sm dark:text-gray-400\">\n        {frontmatter.formattedDate && (\n          <time className=\"font-sans\" dateTime={frontmatter.date}>\n            {frontmatter.formattedDate}\n          </time>\n        )}\n        {frontmatter.version && <span className=\"px-2 py-1 font-mono text-gray-300 text-xs italic dark:text-gray-600\">{frontmatter.version}</span>}\n      </div>\n    )}\n  </header>\n));\n\nconst DocList = memo(({ docs, selectedDoc, onDocSelect }: { docs: EnhancedMarkdownMeta[]; selectedDoc: string | null; onDocSelect: (slug: string) => void }) => {\n  // Group documents by folder and track which is first in each folder\n  const groupedDocs = useCallback(() => {\n    const groups: { [folder: string]: EnhancedMarkdownMeta[] } = {};\n\n    for (const doc of docs) {\n      const folder = doc.folder || '';\n      if (!groups[folder]) {\n        groups[folder] = [];\n      }\n      groups[folder].push(doc);\n    }\n\n    return groups;\n  }, [docs]);\n\n  const groups = groupedDocs();\n\n  return (\n    <div className=\"space-y-1\">\n      {Object.entries(groups).map(([folder, folderDocs]) => {\n        const isRootLevel = folder === '';\n        const folderId = `folder-${folder.replace(/[^a-zA-Z0-9]/g, '-')}`;\n\n        return (\n          <div key={folder || 'root'}>\n            {!isRootLevel && (\n              <div className=\"relative\">\n                <input type=\"checkbox\" id={folderId} className=\"peer hidden\" defaultChecked={true} />\n                <label htmlFor={folderId} className=\"flex w-full cursor-pointer items-center px-3 py-2 text-left text-gray-600 text-sm transition-colors hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-800/50\">\n                  <SpriteIcon id=\"ChevronRight\" className=\"mr-2 h-3 w-3 transition-transform duration-200 peer-checked:rotate-90\" />\n                  <span className=\"font-medium capitalize\">{folder}</span>\n                </label>\n\n                <div className=\"ml-6 max-h-0 space-y-0.5 overflow-hidden transition-all duration-300 peer-checked:max-h-96\">\n                  {folderDocs.map(doc => (\n                    <button\n                      key={doc.slug}\n                      type=\"button\"\n                      onClick={() => onDocSelect(doc.slug)}\n                      className={clsx(\n                        'w-full px-3 py-2 text-left text-sm transition-colors focus:outline-none',\n                        selectedDoc === doc.slug\n                          ? 'border-blue-500 border-r-2 bg-blue-50 text-blue-900 dark:border-blue-400 dark:bg-blue-900/20 dark:text-blue-100'\n                          : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800/50'\n                      )}\n                    >\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{doc.title || doc.slug}</div>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {isRootLevel && (\n              <div className=\"space-y-0.5\">\n                {folderDocs.map(doc => (\n                  <button\n                    key={doc.slug}\n                    type=\"button\"\n                    onClick={() => onDocSelect(doc.slug)}\n                    className={clsx(\n                      'w-full px-3 py-2 text-left text-sm transition-colors focus:outline-none',\n                      selectedDoc === doc.slug\n                        ? 'border-blue-500 border-r-2 bg-blue-50 text-blue-900 dark:border-blue-400 dark:bg-blue-900/20 dark:text-blue-100'\n                        : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800/50'\n                    )}\n                  >\n                    <div className=\"font-medium\">{doc.title || doc.slug}</div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n",
    "export default \"./@ycore/componentry/shadcn-ui/assets/lucide-sprites.svg\";",
    "import type { MarkdownContent, MarkdownMeta } from './markdown-loader';\n\n// Cache for loaded data to avoid multiple file reads\nlet manifestCache: MarkdownMeta[] | null = null;\nlet contentCache: Record<string, MarkdownContent> | null = null;\n\n/**\n * Get markdown manifest data from generated JSON file\n * This reads from the consumer app's generated manifest file\n */\nexport async function getMarkdownManifest(request?: Request): Promise<MarkdownMeta[]> {\n  if (manifestCache) {\n    return manifestCache;\n  }\n\n  try {\n    // In Cloudflare Workers with Vite, static assets from public/ are available at root\n    // Use absolute URL if request is provided for proper resolution in Workers context\n    const manifestUrl = request ? new URL('/markdown-manifest.json', request.url).href : '/markdown-manifest.json';\n\n    const response = await fetch(manifestUrl);\n    if (!response.ok) {\n      console.warn(`Failed to fetch manifest: ${response.status} ${response.statusText}`);\n      return [];\n    }\n\n    const manifest = (await response.json()) as MarkdownMeta[];\n    \n    // Filter out build metadata for runtime use\n    const cleanManifest = manifest.map(({ _mtime, _size, ...item }) => item);\n    \n    manifestCache = cleanManifest;\n    return cleanManifest;\n  } catch (error) {\n    console.warn('Failed to load markdown manifest:', error);\n    return [];\n  }\n}\n\n/**\n * Get markdown content data from generated JSON file\n * This reads from the consumer app's generated content file\n */\nexport async function getMarkdownContent(request?: Request): Promise<Record<string, MarkdownContent>> {\n  if (contentCache) {\n    return contentCache;\n  }\n\n  try {\n    // In Cloudflare Workers with Vite, static assets from public/ are available at root\n    // Use absolute URL if request is provided for proper resolution in Workers context\n    const contentUrl = request ? new URL('/markdown-content.json', request.url).href : '/markdown-content.json';\n\n    const response = await fetch(contentUrl);\n    if (!response.ok) {\n      console.warn(`Failed to fetch content: ${response.status} ${response.statusText}`);\n      return {};\n    }\n\n    const content = (await response.json()) as Record<string, MarkdownContent>;\n    contentCache = content;\n    return content;\n  } catch (error) {\n    console.warn('Failed to load markdown content:', error);\n    return {};\n  }\n}\n\n/**\n * Get a specific markdown document by slug\n */\nexport async function getMarkdownDocument(slug: string, request?: Request): Promise<MarkdownContent | null> {\n  const content = await getMarkdownContent(request);\n  return content[slug] || null;\n}\n\n/**\n * Clear the cache (useful for testing or hot reload)\n */\nexport function clearMarkdownCache(): void {\n  manifestCache = null;\n  contentCache = null;\n}\n\n/**\n * Check if a document exists by slug\n */\nexport async function hasMarkdownDocument(slug: string, request?: Request): Promise<boolean> {\n  const content = await getMarkdownContent(request);\n  return slug in content;\n}\n",
    "import { redirect } from 'react-router';\nimport { getMarkdownDocument } from '../markdown-data';\nimport { routesTemplate } from './markdown';\n\ninterface LoaderArgs {\n  params: { '*': string };\n  request: Request;\n}\n\nexport async function loader({ params, request }: LoaderArgs) {\n  const slug = params['*'];\n\n  // Validate slug\n  if (!slug || typeof slug !== 'string' || slug.trim() === '') {\n    throw new Response('Invalid document slug', { status: 400 });\n  }\n\n  // Sanitize slug to prevent directory traversal (allow forward slashes for folder paths)\n  const sanitizedSlug = slug.replace(/[^a-zA-Z0-9-_/]/g, '');\n  if (sanitizedSlug !== slug) {\n    throw new Response('Invalid document slug format', { status: 400 });\n  }\n\n  // Prevent directory traversal attempts\n  if (sanitizedSlug.includes('..') || sanitizedSlug.startsWith('/') || sanitizedSlug.endsWith('/')) {\n    throw new Response('Invalid document slug format', { status: 400 });\n  }\n\n  const url = new URL(request.url);\n  const isApiCall = url.searchParams.has('api') || request.headers.get('Accept')?.includes('application/json');\n\n  // Check if the document exists\n  const doc = await getMarkdownDocument(sanitizedSlug, request);\n  if (!doc) {\n    throw new Response('Document not found', { status: 404 });\n  }\n\n  // If it's an API call, return the document data\n  if (isApiCall) {\n    const enhancedFrontmatter = {\n      ...doc.frontmatter,\n      formattedDate: doc.frontmatter.date ? new Date(doc.frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) : undefined,\n    };\n\n    return Response.json({ content: doc.content, frontmatter: enhancedFrontmatter, slug: sanitizedSlug });\n  }\n\n  // Otherwise, redirect to main docs page with fragment\n  return redirect(routesTemplate.docs(sanitizedSlug));\n}\n"
  ],
  "mappings": "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",
  "debugId": "6E70DD983EA760A564756E2164756E21",
  "names": []
}