{
  "version": 3,
  "sources": ["../../src/logging/logger.ts"],
  "sourcesContent": [
    "import type { BaseLogParams, LogLevel, LogParams } from './@types/logger.types';\n/**\n * Structured Logging Utility\n * Format and output JSON logs according to Cloudflare Workers Logs best practices\n *\n * @see {@link https://developers.cloudflare.com/workers/observability/logs/workers-logs/}\n * @param {LogParams} params - Log parameters object\n * @param {string} params.event - Event name, used to identify the type of log event\n * @param {LogLevel} [params.level] - Log level, defaults to 'info'\n *\n * @example\n * logger.info({\n *   event: 'auth_success',\n *   user_id: '123',\n *   provider: 'google'\n * });\n *\n * // Output:\n * // {\n * //   event: 'auth_success',\n * //   level: 'info',\n * //   user_id: '123',\n * //   provider: 'google',\n * //   timestamp: '2024-03-21T08:00:00.000Z'\n * // }\n */\nexport const logger = {\n  log(params: LogParams) {\n    console.log({\n      ...params,\n      level: params.level || 'info',\n      timestamp: new Date().toISOString(),\n    });\n  },\n\n  debug(params: BaseLogParams) {\n    this.log({ ...params, level: 'debug' });\n  },\n\n  info(params: BaseLogParams) {\n    this.log({ ...params, level: 'info' });\n  },\n\n  warn(params: BaseLogParams) {\n    this.log({ ...params, level: 'warn' });\n  },\n\n  error(params: BaseLogParams) {\n    this.log({ ...params, level: 'error' });\n  },\n};\n"
  ],
  "mappings": ";AA0BO,IAAM,SAAS;AAAA,EACpB,GAAG,CAAC,QAAmB;AAAA,IACrB,QAAQ,IAAI;AAAA,SACP;AAAA,MACH,OAAO,OAAO,SAAS;AAAA,MACvB,WAAW,IAAI,KAAK,EAAE,YAAY;AAAA,IACpC,CAAC;AAAA;AAAA,EAGH,KAAK,CAAC,QAAuB;AAAA,IAC3B,KAAK,IAAI,KAAK,QAAQ,OAAO,QAAQ,CAAC;AAAA;AAAA,EAGxC,IAAI,CAAC,QAAuB;AAAA,IAC1B,KAAK,IAAI,KAAK,QAAQ,OAAO,OAAO,CAAC;AAAA;AAAA,EAGvC,IAAI,CAAC,QAAuB;AAAA,IAC1B,KAAK,IAAI,KAAK,QAAQ,OAAO,OAAO,CAAC;AAAA;AAAA,EAGvC,KAAK,CAAC,QAAuB;AAAA,IAC3B,KAAK,IAAI,KAAK,QAAQ,OAAO,QAAQ,CAAC;AAAA;AAE1C;",
  "debugId": "A18FE2DFB6291FEA64756E2164756E21",
  "names": []
}