{
  "version": 3,
  "sources": ["../../src/markdown/markdown-config.ts", "node:path", "../../src/markdown/utils.ts", "../../src/markdown/markdown-compression.ts", "../../src/markdown/markdown-data.ts", "../../src/markdown/markdown-loader.tsx", "../../src/markdown/routes/markdown.tsx", "../../src/markdown/routes/markdown.$slug.tsx"],
  "sourcesContent": [
    "// Central configuration for all markdown defaults and asset paths\nexport const MARKDOWN_CONFIG = {\n  EXTENSION: '.md',\n  CHUNK_BY_FOLDER: true,\n  INCREMENTAL_BY_FOLDER: false,\n  PREFIX: 'markdown',\n  PURIFY_HTML: true,\n  UPDATE_DATE: true,\n  COMPRESS: true,\n  CONCURRENCY: {\n    FOLDERS: 5,\n    FILES: 10,\n  },\n  CACHE: {\n    MAX_AGE: 3600, // 1 hour default\n  },\n} as const;\n\n// Central configuration for asset prefixes - change these to modify where markdown assets are stored/fetched\nexport const ASSET_PREFIX = {\n  build: '/assets/docs',  // Where assets are written during build (relative to /public)\n  fetch: '/assets/docs'   // URL prefix for fetching assets at runtime\n} as const;\n\n// DOMPurify configuration for markdown content\nexport const DOMPURIFY_CONFIG = {\n  ALLOWED_TAGS: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'strong', 'em', 'u', 's', 'del', 'a', 'img', 'ul', 'ol', 'li', 'blockquote', 'pre', 'code', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'hr', 'div', 'span'] as string[],\n  ALLOWED_ATTR: ['href', 'title', 'alt', 'src', 'class', 'id', 'start', 'type', 'colspan', 'rowspan', 'datetime', 'scope', 'data-*'] as string[],\n  FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input', 'button', 'iframe', 'frame', 'frameset', 'noframes'] as string[],\n  FORBID_ATTR: ['style', 'on*'] as string[],\n  KEEP_CONTENT: true,\n  ALLOW_DATA_ATTR: false,\n};\n\n// Shiki highlighter configuration\nexport const HIGHLIGHTER_CONFIG = {\n  LANGS: ['javascript', 'typescript', 'css', 'html', 'bash', 'yaml', 'json', 'markdown'] as string[],\n  THEMES: ['night-owl'] as string[],\n};\n",
    "function assertPath(path){if(typeof path!==\"string\")throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(path))}function normalizeStringPosix(path,allowAboveRoot){var res=\"\",lastSegmentLength=0,lastSlash=-1,dots=0,code;for(var i=0;i<=path.length;++i){if(i<path.length)code=path.charCodeAt(i);else if(code===47)break;else code=47;if(code===47){if(lastSlash===i-1||dots===1);else if(lastSlash!==i-1&&dots===2){if(res.length<2||lastSegmentLength!==2||res.charCodeAt(res.length-1)!==46||res.charCodeAt(res.length-2)!==46){if(res.length>2){var lastSlashIndex=res.lastIndexOf(\"/\");if(lastSlashIndex!==res.length-1){if(lastSlashIndex===-1)res=\"\",lastSegmentLength=0;else res=res.slice(0,lastSlashIndex),lastSegmentLength=res.length-1-res.lastIndexOf(\"/\");lastSlash=i,dots=0;continue}}else if(res.length===2||res.length===1){res=\"\",lastSegmentLength=0,lastSlash=i,dots=0;continue}}if(allowAboveRoot){if(res.length>0)res+=\"/..\";else res=\"..\";lastSegmentLength=2}}else{if(res.length>0)res+=\"/\"+path.slice(lastSlash+1,i);else res=path.slice(lastSlash+1,i);lastSegmentLength=i-lastSlash-1}lastSlash=i,dots=0}else if(code===46&&dots!==-1)++dots;else dots=-1}return res}function _format(sep,pathObject){var dir=pathObject.dir||pathObject.root,base=pathObject.base||(pathObject.name||\"\")+(pathObject.ext||\"\");if(!dir)return base;if(dir===pathObject.root)return dir+base;return dir+sep+base}function resolve(){var resolvedPath=\"\",resolvedAbsolute=!1,cwd;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path;if(i>=0)path=arguments[i];else{if(cwd===void 0)cwd=process.cwd();path=cwd}if(assertPath(path),path.length===0)continue;resolvedPath=path+\"/\"+resolvedPath,resolvedAbsolute=path.charCodeAt(0)===47}if(resolvedPath=normalizeStringPosix(resolvedPath,!resolvedAbsolute),resolvedAbsolute)if(resolvedPath.length>0)return\"/\"+resolvedPath;else return\"/\";else if(resolvedPath.length>0)return resolvedPath;else return\".\"}function normalize(path){if(assertPath(path),path.length===0)return\".\";var isAbsolute=path.charCodeAt(0)===47,trailingSeparator=path.charCodeAt(path.length-1)===47;if(path=normalizeStringPosix(path,!isAbsolute),path.length===0&&!isAbsolute)path=\".\";if(path.length>0&&trailingSeparator)path+=\"/\";if(isAbsolute)return\"/\"+path;return path}function isAbsolute(path){return assertPath(path),path.length>0&&path.charCodeAt(0)===47}function join(){if(arguments.length===0)return\".\";var joined;for(var i=0;i<arguments.length;++i){var arg=arguments[i];if(assertPath(arg),arg.length>0)if(joined===void 0)joined=arg;else joined+=\"/\"+arg}if(joined===void 0)return\".\";return normalize(joined)}function relative(from,to){if(assertPath(from),assertPath(to),from===to)return\"\";if(from=resolve(from),to=resolve(to),from===to)return\"\";var fromStart=1;for(;fromStart<from.length;++fromStart)if(from.charCodeAt(fromStart)!==47)break;var fromEnd=from.length,fromLen=fromEnd-fromStart,toStart=1;for(;toStart<to.length;++toStart)if(to.charCodeAt(toStart)!==47)break;var toEnd=to.length,toLen=toEnd-toStart,length=fromLen<toLen?fromLen:toLen,lastCommonSep=-1,i=0;for(;i<=length;++i){if(i===length){if(toLen>length){if(to.charCodeAt(toStart+i)===47)return to.slice(toStart+i+1);else if(i===0)return to.slice(toStart+i)}else if(fromLen>length){if(from.charCodeAt(fromStart+i)===47)lastCommonSep=i;else if(i===0)lastCommonSep=0}break}var fromCode=from.charCodeAt(fromStart+i),toCode=to.charCodeAt(toStart+i);if(fromCode!==toCode)break;else if(fromCode===47)lastCommonSep=i}var out=\"\";for(i=fromStart+lastCommonSep+1;i<=fromEnd;++i)if(i===fromEnd||from.charCodeAt(i)===47)if(out.length===0)out+=\"..\";else out+=\"/..\";if(out.length>0)return out+to.slice(toStart+lastCommonSep);else{if(toStart+=lastCommonSep,to.charCodeAt(toStart)===47)++toStart;return to.slice(toStart)}}function _makeLong(path){return path}function dirname(path){if(assertPath(path),path.length===0)return\".\";var code=path.charCodeAt(0),hasRoot=code===47,end=-1,matchedSlash=!0;for(var i=path.length-1;i>=1;--i)if(code=path.charCodeAt(i),code===47){if(!matchedSlash){end=i;break}}else matchedSlash=!1;if(end===-1)return hasRoot?\"/\":\".\";if(hasRoot&&end===1)return\"//\";return path.slice(0,end)}function basename(path,ext){if(ext!==void 0&&typeof ext!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(path);var start=0,end=-1,matchedSlash=!0,i;if(ext!==void 0&&ext.length>0&&ext.length<=path.length){if(ext.length===path.length&&ext===path)return\"\";var extIdx=ext.length-1,firstNonSlashEnd=-1;for(i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){start=i+1;break}}else{if(firstNonSlashEnd===-1)matchedSlash=!1,firstNonSlashEnd=i+1;if(extIdx>=0)if(code===ext.charCodeAt(extIdx)){if(--extIdx===-1)end=i}else extIdx=-1,end=firstNonSlashEnd}}if(start===end)end=firstNonSlashEnd;else if(end===-1)end=path.length;return path.slice(start,end)}else{for(i=path.length-1;i>=0;--i)if(path.charCodeAt(i)===47){if(!matchedSlash){start=i+1;break}}else if(end===-1)matchedSlash=!1,end=i+1;if(end===-1)return\"\";return path.slice(start,end)}}function extname(path){assertPath(path);var startDot=-1,startPart=0,end=-1,matchedSlash=!0,preDotState=0;for(var i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1)matchedSlash=!1,end=i+1;if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1)preDotState=-1}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1)return\"\";return path.slice(startDot,end)}function format(pathObject){if(pathObject===null||typeof pathObject!==\"object\")throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof pathObject);return _format(\"/\",pathObject)}function parse(path){assertPath(path);var ret={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(path.length===0)return ret;var code=path.charCodeAt(0),isAbsolute2=code===47,start;if(isAbsolute2)ret.root=\"/\",start=1;else start=0;var startDot=-1,startPart=0,end=-1,matchedSlash=!0,i=path.length-1,preDotState=0;for(;i>=start;--i){if(code=path.charCodeAt(i),code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1)matchedSlash=!1,end=i+1;if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1)preDotState=-1}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1){if(end!==-1)if(startPart===0&&isAbsolute2)ret.base=ret.name=path.slice(1,end);else ret.base=ret.name=path.slice(startPart,end)}else{if(startPart===0&&isAbsolute2)ret.name=path.slice(1,startDot),ret.base=path.slice(1,end);else ret.name=path.slice(startPart,startDot),ret.base=path.slice(startPart,end);ret.ext=path.slice(startDot,end)}if(startPart>0)ret.dir=path.slice(0,startPart-1);else if(isAbsolute2)ret.dir=\"/\";return ret}var sep=\"/\",delimiter=\":\",posix=((p)=>(p.posix=p,p))({resolve,normalize,isAbsolute,join,relative,_makeLong,dirname,basename,extname,format,parse,sep,delimiter,win32:null,posix:null});var path_default=posix;export{sep,resolve,relative,posix,parse,normalize,join,isAbsolute,format,extname,dirname,delimiter,path_default as default,basename,_makeLong};",
    "import path from 'node:path';\nimport { ASSET_PREFIX, MARKDOWN_CONFIG } from './markdown-config';\n\n/**\n * Get the full asset path for files during build time\n * @param filename - The filename to get the path for\n * @returns Full path where the file should be written during build\n */\nexport function getAssetPath(filename: string): string {\n  // Normalize the build prefix to handle leading slashes\n  const buildPrefix = ASSET_PREFIX.build.startsWith('/') ? ASSET_PREFIX.build.slice(1) : ASSET_PREFIX.build;\n  return path.join(process.cwd(), 'public', buildPrefix, filename);\n}\n\n/**\n * Determine if a file should use gzip compression based on filename and config\n */\nfunction shouldUseCompression(filename: string): boolean {\n  if (!MARKDOWN_CONFIG.COMPRESS) return false;\n  \n  // Only compress content files, not manifest files\n  const isContentFile = filename.includes('content') && !filename.includes('manifest');\n  return isContentFile;\n}\n\n/**\n * Get the asset URL for fetching at runtime\n * @param filename - The filename to get the URL for\n * @param request - Optional request object for absolute URL generation\n * @param forceCompressed - Force compression regardless of config (for backward compatibility)\n * @returns URL where the file can be fetched at runtime\n */\nexport function getAssetUrl(filename: string, request?: Request, forceCompressed?: boolean): string {\n  const fetchPrefix = ASSET_PREFIX.fetch.endsWith('/') ? ASSET_PREFIX.fetch.slice(0, -1) : ASSET_PREFIX.fetch;\n  \n  // Add .gz extension for content files when compression is enabled\n  const shouldCompress = forceCompressed || shouldUseCompression(filename);\n  const finalFilename = shouldCompress ? `${filename}.gz` : filename;\n  \n  const url = `${fetchPrefix}/${finalFilename}`;\n  return request ? new URL(url, request.url).href : url;\n}\n\n/**\n * Get the compressed file path based on compression format\n * @param basePath - The base file path\n * @param compression - The compression format ('brotli' | 'gzip' | null)\n * @returns File path with appropriate compression extension\n */\nexport function getCompressedFilePath(basePath: string, compression: 'brotli' | 'gzip' | null): string {\n  if (!compression) return basePath;\n  const ext = compression === 'brotli' ? '.br' : '.gz';\n  return `${basePath}${ext}`;\n}\n",
    "/**\n * Smart serving helpers for compressed markdown content\n */\nimport type { CompressionHeaders, ServeOptions } from '../@types/markdown.types';\nimport { MARKDOWN_CONFIG } from './markdown-config';\nimport { getCompressedFilePath } from './utils';\n\n/**\n * Decompress gzip content using native DecompressionStream API\n */\nexport async function decompressGzip(compressedData: ArrayBuffer): Promise<string> {\n  try {\n    const stream = new ReadableStream({\n      start(controller) {\n        controller.enqueue(new Uint8Array(compressedData));\n        controller.close();\n      }\n    });\n\n    const decompressedStream = stream.pipeThrough(new DecompressionStream('gzip'));\n    const response = new Response(decompressedStream);\n    return await response.text();\n  } catch (error) {\n    throw new Error(`Gzip decompression failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Fetch and decompress gzip content from a URL\n */\nexport async function fetchDecompressed(url: string, assets?: Fetcher): Promise<string> {\n  const fetchFn = assets ? (input: RequestInfo | URL, init?: RequestInit) => assets.fetch(input, init) : fetch;\n  const response = await fetchFn(url);\n\n  if (!response.ok) {\n    throw new Error(`Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n  }\n\n  const arrayBuffer = await response.arrayBuffer();\n  return await decompressGzip(arrayBuffer);\n}\n\n/**\n * Creates headers for compressed content serving\n */\nexport function getCompressionHeaders(isCompressed: boolean, options: ServeOptions = {}): CompressionHeaders {\n  const { maxAge = MARKDOWN_CONFIG.CACHE.MAX_AGE } = options;\n  const headers: CompressionHeaders = {\n    'Content-Type': 'application/json',\n    'Vary': 'Accept-Encoding',\n  };\n\n  if (isCompressed) {\n    headers['Content-Encoding'] = 'gzip';\n  }\n\n  if (maxAge > 0) {\n    headers['Cache-Control'] = `public, max-age=${maxAge}`;\n  }\n\n  return headers;\n}\n\n/**\n * Smart content serving function for React Router loaders\n */\nexport async function serveCompressedContent(\n  filename: string,\n  options: ServeOptions = {}\n): Promise<Response> {\n  const { acceptEncoding, prefix = MARKDOWN_CONFIG.PREFIX } = options;\n  const supportsGzip = acceptEncoding?.includes('gzip') ?? false;\n  const filePath = getCompressedFilePath(`/public/${prefix}-${filename}`, supportsGzip ? 'gzip' : null);\n  const headers = getCompressionHeaders(supportsGzip, options);\n\n  try {\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      // Fallback to uncompressed if gzip version doesn't exist\n      const fallbackPath = `/public/${prefix}-${filename}`;\n      const fallbackResponse = await fetch(fallbackPath);\n\n      if (fallbackResponse.ok) {\n        const content = await fallbackResponse.text();\n        return new Response(content, { headers: getCompressionHeaders(false, options) });\n      }\n\n      throw new Error(`File not found: ${filename}`);\n    }\n\n    const content = await response.arrayBuffer();\n    return new Response(content, { headers });\n\n  } catch (_error) {\n    return new Response('Not Found', { status: 404 });\n  }\n}\n\n/**\n * Helper for React Router data loading with gzip support\n */\nexport function createMarkdownLoader(options: ServeOptions = {}) {\n  return async ({ request }: { request: Request }) => {\n    const acceptEncoding = request.headers.get('accept-encoding') || undefined;\n\n    return {\n      manifest: await serveCompressedContent('manifest.json', { ...options, acceptEncoding }),\n      content: await serveCompressedContent('content.json', { ...options, acceptEncoding }),\n    };\n  };\n}\n",
    "import type { GlobalManifest, MarkdownContent, MarkdownMeta } from '../@types/markdown.types';\nimport { fetchDecompressed } from './markdown-compression';\nimport { getAssetUrl } from './utils';\n\n// Cache for loaded data to avoid multiple file reads\nlet manifestCache: MarkdownMeta[] | null = null;\nlet globalManifestCache: GlobalManifest | null = null;\nlet contentCache: Record<string, MarkdownContent> | null = null;\nconst folderContentCache: Map<string, Record<string, MarkdownContent>> = new Map();\n\n/**\n * Fetch JSON content with optional decompression support and fallback\n * @param url - The URL to fetch from\n * @param assets - Optional Cloudflare ASSETS binding for static asset serving\n * @returns Parsed JSON content\n */\nasync function fetchContent<T>(url: string, assets?: Fetcher): Promise<T> {\n  console.log('fetchContent: Starting fetch for URL:', url);\n  \n  // Use ASSETS binding if available (Cloudflare Worker environment)\n  const fetchFn = assets ? (input: RequestInfo | URL, init?: RequestInit) => assets.fetch(input, init) : fetch;\n  \n  try {\n    if (url.endsWith('.gz')) {\n      console.log('fetchContent: Detected compressed file, attempting decompression');\n      // Try compressed version first\n      try {\n        const decompressedText = await fetchDecompressed(url, assets);\n        console.log('fetchContent: Successfully decompressed, text length:', decompressedText.length);\n        const parsed = JSON.parse(decompressedText) as T;\n        console.log('fetchContent: Successfully parsed JSON from compressed file');\n        return parsed;\n      } catch (compressionError) {\n        console.warn(`fetchContent: Failed to fetch compressed version ${url}:`, compressionError);\n\n        // Fallback to uncompressed version if compressed fails\n        const fallbackUrl = url.replace('.gz', '');\n        console.warn(`fetchContent: Trying fallback ${fallbackUrl}`);\n\n        try {\n          const response = await fetchFn(fallbackUrl);\n          if (!response.ok) {\n            throw new Error(`Fallback HTTP ${response.status}: ${response.statusText}`);\n          }\n          const parsed = (await response.json()) as T;\n          console.log('fetchContent: Successfully fetched and parsed fallback uncompressed file');\n          return parsed;\n        } catch (fallbackError) {\n          console.error('fetchContent: Fallback also failed:', fallbackError);\n          // If both compressed and uncompressed fail, throw the original compression error\n          throw compressionError;\n        }\n      }\n    } else {\n      console.log('fetchContent: Fetching uncompressed file');\n      // Standard fetch for uncompressed files\n      const response = await fetchFn(url);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const parsed = (await response.json()) as T;\n      console.log('fetchContent: Successfully fetched and parsed uncompressed file');\n      return parsed;\n    }\n  } catch (error) {\n    const errorMsg = `Failed to fetch and parse JSON from ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    console.error('fetchContent: Final error:', errorMsg);\n    throw new Error(errorMsg);\n  }\n}\n\n/**\n * Get global manifest data which includes documents and chunking info\n */\nasync function getGlobalManifest(request?: Request, assets?: Fetcher): Promise<GlobalManifest> {\n  if (globalManifestCache) {\n    return globalManifestCache;\n  }\n\n  try {\n    const manifestUrl = getAssetUrl('markdown-manifest.json', request);\n    console.log('Fetching global manifest from URL:', manifestUrl);\n    const globalManifest = await fetchContent<GlobalManifest>(manifestUrl, assets);\n    console.log('Successfully loaded global manifest with', globalManifest.documents.length, 'documents');\n    globalManifestCache = globalManifest;\n    return globalManifest;\n  } catch (error) {\n    console.error('Failed to load global manifest:', error);\n    return { documents: [], _buildMode: 'single' };\n  }\n}\n\n/**\n * Get markdown manifest data from generated JSON file\n * This reads from the consumer app's generated manifest file\n */\nexport async function getMarkdownManifest(request?: Request, assets?: Fetcher): Promise<MarkdownMeta[]> {\n  if (manifestCache) {\n    return manifestCache;\n  }\n\n  const globalManifest = await getGlobalManifest(request, assets);\n\n  // Filter out build metadata for runtime use\n  const cleanManifest = globalManifest.documents.map(({ _mtime, _size, ...item }) => item);\n\n  manifestCache = cleanManifest;\n  return cleanManifest;\n}\n\n/**\n * Get markdown content data from generated JSON file\n * This reads from the consumer app's generated content file or folder chunks\n */\nexport async function getMarkdownContent(request?: Request, assets?: Fetcher): Promise<Record<string, MarkdownContent>> {\n  const globalManifest = await getGlobalManifest(request, assets);\n\n  // In folder chunk mode, we don't preload all content\n  if (globalManifest._buildMode === 'chunked') {\n    // console.warn('getMarkdownContent() called in folder chunk mode. Use getMarkdownDocument() or loadFolderContent() instead.');\n    return {};\n  }\n\n  if (contentCache) {\n    return contentCache;\n  }\n\n  try {\n    const contentUrl = getAssetUrl('markdown-content.json', request);\n    const content = await fetchContent<Record<string, MarkdownContent>>(contentUrl, assets);\n    contentCache = content;\n    return content;\n  } catch (_error) {\n    // console.warn('Failed to load markdown content:', error);\n    return {};\n  }\n}\n\n/**\n * Load content for a specific folder (lazy loading)\n */\nexport async function loadFolderContent(folder: string, request?: Request, assets?: Fetcher): Promise<Record<string, MarkdownContent>> {\n  console.log('loadFolderContent: Loading content for folder:', folder);\n  \n  // Check cache first\n  if (folderContentCache.has(folder)) {\n    const cachedContent = folderContentCache.get(folder);\n    if (cachedContent) {\n      console.log('loadFolderContent: Found cached content for folder:', folder);\n      return cachedContent;\n    }\n  }\n\n  try {\n    const folderKey = folder.replace(/[/\\\\]/g, '-');\n    const contentUrl = getAssetUrl(`markdown-content-${folderKey}.json`, request);\n    console.log('loadFolderContent: Generated content URL:', contentUrl, 'for folder:', folder);\n\n    const content = await fetchContent<Record<string, MarkdownContent>>(contentUrl, assets);\n    console.log('loadFolderContent: Successfully loaded content with', Object.keys(content).length, 'documents for folder:', folder);\n    folderContentCache.set(folder, content);\n    return content;\n  } catch (error) {\n    console.error(`loadFolderContent: Failed to load folder content for ${folder}:`, error);\n    return {};\n  }\n}\n\n/**\n * Get all documents for a specific folder\n */\nexport async function getFolderDocuments(folder: string, request?: Request, assets?: Fetcher): Promise<MarkdownContent[]> {\n  const content = await loadFolderContent(folder, request, assets);\n  return Object.values(content);\n}\n\n/**\n * Get a specific markdown document by slug\n */\nexport async function getMarkdownDocument(slug: string, request?: Request, assets?: Fetcher): Promise<MarkdownContent | null> {\n  const globalManifest = await getGlobalManifest(request, assets);\n\n  // In folder chunk mode, we need to determine which folder the document is in\n  if (globalManifest._buildMode === 'chunked') {\n    const manifest = await getMarkdownManifest(request, assets);\n    const docMeta = manifest.find(doc => doc.slug === slug);\n\n    if (!docMeta || !docMeta.folder) {\n      return null;\n    }\n\n    const folderContent = await loadFolderContent(docMeta.folder, request, assets);\n    return folderContent[slug] || null;\n  }\n\n  // Fallback to traditional mode\n  const content = await getMarkdownContent(request, assets);\n  return content[slug] || null;\n}\n\n/**\n * Clear the cache (useful for testing or hot reload)\n */\nexport function clearMarkdownCache(): void {\n  manifestCache = null;\n  globalManifestCache = null;\n  contentCache = null;\n  folderContentCache.clear();\n}\n\n/**\n * Clear cache for a specific folder\n */\nexport function clearFolderCache(folder: string): void {\n  folderContentCache.delete(folder);\n}\n\n/**\n * Preload content for multiple folders\n */\nexport async function preloadFolders(folders: string[], request?: Request, assets?: Fetcher): Promise<void> {\n  await Promise.all(folders.map(folder => loadFolderContent(folder, request, assets)));\n}\n\n/**\n * Check if a document exists by slug\n */\nexport async function hasMarkdownDocument(slug: string, request?: Request, assets?: Fetcher): Promise<boolean> {\n  const globalManifest = await getGlobalManifest(request, assets);\n\n  if (globalManifest._buildMode === 'chunked') {\n    const manifest = await getMarkdownManifest(request, assets);\n    return manifest.some(doc => doc.slug === slug);\n  }\n\n  const content = await getMarkdownContent(request, assets);\n  return slug in content;\n}\n\n/**\n * Get documents by folder with pagination support\n */\nexport async function getFolderDocumentsPaginated(folder: string, offset = 0, limit = 10, request?: Request, assets?: Fetcher): Promise<{ documents: MarkdownMeta[]; total: number; hasMore: boolean }> {\n  const manifest = await getMarkdownManifest(request, assets);\n  const folderDocs = manifest.filter(doc => doc.folder === folder);\n  const total = folderDocs.length;\n  const paginatedDocs = folderDocs.slice(offset, offset + limit);\n\n  return {\n    documents: paginatedDocs,\n    total,\n    hasMore: offset + limit < total,\n  };\n}\n\n/**\n * Get all unique folders from manifest\n */\nexport async function getAllFolders(request?: Request, assets?: Fetcher): Promise<string[]> {\n  const manifest = await getMarkdownManifest(request, assets);\n  const folders = new Set<string>();\n\n  manifest.forEach(doc => {\n    if (doc.folder) {\n      folders.add(doc.folder);\n    }\n  });\n\n  return Array.from(folders).sort();\n}\n\n/**\n * Get the current build mode from the manifest\n */\nexport async function getBuildMode(request?: Request, assets?: Fetcher): Promise<'single' | 'chunked'> {\n  const globalManifest = await getGlobalManifest(request, assets);\n  return globalManifest._buildMode;\n}\n",
    "import type { MarkdownProps } from \"../@types/markdown.types\";\n\nexport function Markdown({ children, className = '' }: MarkdownProps) {\n  if (!children || typeof children !== 'string') {\n    return <div className={className} />;\n  }\n\n  // biome-ignore lint/security/noDangerouslySetInnerHtml: Content is pre-sanitized at build time\n  return <div className={className} dangerouslySetInnerHTML={{ __html: children }} />;\n}\n",
    "/** biome-ignore-all lint/a11y/noSvgWithoutTitle: acceptable */\nimport { SpriteIcon } from '@ycore/componentry/images';\nimport type { Themes } from '@ycore/componentry/impetus';\nimport { LoadingBar, ThemeSwitch } from '@ycore/componentry/impetus';\nimport { type IconName, Link } from '@ycore/componentry/shadcn-ui';\nimport clsx from 'clsx';\nimport { memo, useCallback, useEffect, useState } from 'react';\nimport { useFetcher, useLocation } from 'react-router';\nimport type { DocContent, EnhancedMarkdownMeta, MarkdownPageProps } from '../../@types/markdown.types';\nimport { getMarkdownManifest } from '../markdown-data';\nimport { Markdown } from '../markdown-loader';\n\n// Type guard\nconst isDocContent = (data: unknown): data is DocContent => {\n  return typeof data === 'object' && data !== null && 'content' in data && 'frontmatter' in data && 'slug' in data;\n};\n\nexport const routesTemplate = {\n  docs: (slug: string) => `/docs#${slug}`,\n  docsApi: (slug: string) => `/docs/${slug}?api`,\n};\n\n// Enhanced loader for Cloudflare Worker environments\nexport function createMarkdownLoader() {\n  return async function markdownLoader({ request }: { request: Request }): Promise<EnhancedMarkdownMeta[]> {\n    try {\n      console.log('markdownLoader: Starting manifest fetch for request URL:', request.url);\n      const manifest = await getMarkdownManifest(request);\n      console.log('markdownLoader: Successfully loaded manifest with', manifest.length, 'documents');\n      return manifest as EnhancedMarkdownMeta[];\n    } catch (error) {\n      console.error('markdownLoader: Failed to load manifest:', error);\n      console.error('markdownLoader: Request URL was:', request.url);\n      // Return empty array so the UI can show \"No documentation found\" instead of crashing\n      return [];\n    }\n  };\n}\n\nexport default function MarkdownPage({ loaderData, spriteUrl, themeContext }: MarkdownPageProps) {\n  const docs = loaderData;\n  const location = useLocation();\n  const [selectedDoc, setSelectedDoc] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const fetcher = useFetcher();\n\n  useEffect(() => setMounted(true), []);\n\n  const handleDocSelect = useCallback(\n    (slug: string) => {\n      if (selectedDoc === slug) return;\n      setSelectedDoc(slug);\n      setError(null);\n      fetcher.load(routesTemplate.docsApi(slug));\n      window.history.replaceState(null, '', routesTemplate.docs(slug));\n    },\n    [fetcher.load, selectedDoc]\n  );\n\n  // Initialize from URL hash on mount only\n  useEffect(() => {\n    const hash = location.hash.slice(1);\n    if (hash && docs.find((doc: EnhancedMarkdownMeta) => doc.slug === hash) && !selectedDoc) {\n      setSelectedDoc(hash);\n      fetcher.load(routesTemplate.docsApi(hash));\n    }\n  }, [docs, fetcher.load, selectedDoc, location.hash.slice]);\n\n  // Handle browser back/forward navigation\n  useEffect(() => {\n    const handlePopState = () => {\n      const hash = window.location.hash.slice(1);\n      if (hash && docs.find((doc: EnhancedMarkdownMeta) => doc.slug === hash)) {\n        setSelectedDoc(hash);\n        setError(null);\n        fetcher.load(routesTemplate.docsApi(hash));\n      } else {\n        setSelectedDoc(null);\n        setError(null);\n      }\n    };\n\n    window.addEventListener('popstate', handlePopState);\n    return () => window.removeEventListener('popstate', handlePopState);\n  }, [docs, fetcher.load]);\n\n  // Handle fetch errors\n  useEffect(() => {\n    if (fetcher.state === 'idle' && fetcher.data && !isDocContent(fetcher.data)) {\n      setError('Failed to load document');\n    }\n  }, [fetcher.state, fetcher.data]);\n\n  const currentDoc = isDocContent(fetcher.data) ? fetcher.data : undefined;\n\n  return (\n    <div className=\"min-h-screen bg-white transition-colors dark:bg-gray-900\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside\n          className={`fixed inset-y-0 top-0 left-0 z-20 overflow-y-auto border-gray-200 border-r bg-white transition-transform duration-300 dark:border-gray-800 dark:bg-gray-900 ${sidebarCollapsed ? '-translate-x-full' : 'translate-x-0'} w-80`}\n        >\n          <div className=\"p-6\">\n            <div className=\"mb-6 flex items-center justify-between\">\n              <h2 className=\"font-semibold text-gray-900 text-lg dark:text-white\">Documentation</h2>\n              <div>\n                <button type=\"button\" onClick={() => setSidebarCollapsed(!sidebarCollapsed)} className=\"rounded-md p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\">\n                  <SpriteIcon<IconName> url={spriteUrl} id=\"ChevronLeft\" className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n            <nav className=\"space-y-1\" aria-label=\"Documentation navigation\">\n              {docs.length === 0 ? <DocListEmpty /> : <DocList docs={docs} selectedDoc={selectedDoc} onDocSelect={handleDocSelect} spriteUrl={spriteUrl} />}\n            </nav>\n            <div className=\"fixed right-4 bottom-4 z-10 flex items-center justify-between gap-x-4\">\n              <Link href=\"/\">\n                <SpriteIcon<IconName> url={spriteUrl} id=\"House\" className=\"size-5 text-accent-foreground\" viewBox=\"0 0 24 24\" />\n              </Link>\n              {!mounted ? (\n                <div className=\"size-5\" />\n              ) : (\n                <ThemeSwitch spriteUrl={spriteUrl}>\n                  {themeContext\n                    ? ({ theme }: { theme: Themes }) => (\n                      <button\n                        type=\"button\"\n                        className=\"size-5 hover:animate-rotate\"\n                        aria-label=\"theme switch\"\n                        onClick={() => {\n                          themeContext.setTheme(themeContext.resolvedTheme === theme.theme.dark ? theme.theme.light : theme.theme.dark);\n                        }}\n                      >\n                        {themeContext.resolvedTheme === theme.theme.dark ? <SpriteIcon url={spriteUrl} id=\"Moon\" className=\"size-5\" /> : <SpriteIcon url={spriteUrl} id=\"Sun\" className=\"size-5\" />}\n                      </button>\n                    )\n                    : undefined}\n                </ThemeSwitch>\n              )}\n            </div>\n          </div>\n        </aside>\n\n        {/* Sidebar toggle button - visible when sidebar is collapsed */}\n        <button\n          type=\"button\"\n          onClick={() => setSidebarCollapsed(false)}\n          className={`fixed top-4 left-4 z-30 rounded-md border border-gray-200 bg-white p-2 text-gray-500 shadow-sm transition-opacity duration-300 hover:text-gray-700 dark:border-gray-800 dark:bg-gray-900 dark:text-gray-400 dark:hover:text-gray-200 ${sidebarCollapsed ? 'opacity-100' : 'pointer-events-none opacity-0'}`}\n        >\n          <SpriteIcon<IconName> url={spriteUrl} id=\"EllipsisVertical\" className=\"h-5 w-5\" />\n        </button>\n\n        {/* Main content */}\n        <main className={`flex-1 transition-all duration-300 ${sidebarCollapsed ? 'pl-0' : 'pl-64'} min-w-0`}>\n          <div className=\"mx-auto min-w-0 max-w-4xl px-4 md:px-8\">\n            {!selectedDoc ? (\n              <div className=\"flex h-96 items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"mb-4 text-gray-400 dark:text-gray-500\">\n                    <SpriteIcon<IconName> url={spriteUrl} id=\"CircleAlert\" className=\"h-8 w-8\" />\n                  </div>\n                  <h3 className=\"mb-2 font-medium text-gray-900 text-lg dark:text-white\">Select a document</h3>\n                  <p className=\"text-gray-500 dark:text-gray-400\">Choose a document from the sidebar to view its content.</p>\n                </div>\n              </div>\n            ) : fetcher.state === 'loading' ? (\n              <LoadingBar />\n            ) : error ? (\n              <DocumentNotFound spriteUrl={spriteUrl} />\n            ) : currentDoc ? (\n              <article className=\"markdown-content min-w-0 py-8 md:py-12\">\n                <DocumentHeader frontmatter={currentDoc.frontmatter} />\n                <Markdown className=\"min-w-0 max-w-none\">{currentDoc.content}</Markdown>\n              </article>\n            ) : (\n              <DocumentNotFound spriteUrl={spriteUrl} />\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nconst DocListEmpty = () => {\n  return <p className=\"text-gray-500 text-sm dark:text-gray-400\">No documentation found.</p>;\n};\n\n// Memoized components\n// const LoadingBar = memo(() => <div className=\"loading-bar\" />);\n\nconst DocumentNotFound = memo(({ spriteUrl }: { spriteUrl: string }) => (\n  <div className=\"flex h-96 items-center justify-center\">\n    <div className=\"text-center\">\n      <div className=\"mb-4 text-red-400 dark:text-red-500\">\n        <SpriteIcon<IconName> url={spriteUrl} id=\"CircleAlert\" className=\"mx-auto h-8 w-8\" />\n      </div>\n      <h3 className=\"mb-2 font-medium text-gray-900 text-lg dark:text-white\">Document not found</h3>\n      <p className=\"text-gray-500 dark:text-gray-400\">The selected document could not be loaded.</p>\n    </div>\n  </div>\n));\n\nconst DocumentHeader = memo(({ frontmatter }: { frontmatter: Record<string, any> }) => (\n  <header className=\"mb-8\">\n    {frontmatter.title && <h1 className=\"mb-4 font-bold font-serif text-3xl text-gray-900 dark:text-white\">{frontmatter.title}</h1>}\n    {frontmatter.description && <p className=\"mb-4 font-serif text-gray-600 text-lg dark:text-gray-300\">{frontmatter.description}</p>}\n    {(frontmatter.formattedDate || frontmatter.version) && (\n      <div className=\"flex items-center justify-between text-gray-500 text-sm dark:text-gray-400\">\n        {frontmatter.formattedDate && (\n          <time className=\"font-sans\" dateTime={frontmatter.date}>\n            {frontmatter.formattedDate}\n          </time>\n        )}\n        {frontmatter.version && <span className=\"px-2 py-1 font-mono text-gray-300 text-xs italic dark:text-gray-600\">{frontmatter.version}</span>}\n      </div>\n    )}\n  </header>\n));\n\nconst DocList = memo(({ docs, selectedDoc, onDocSelect, spriteUrl }: { docs: EnhancedMarkdownMeta[]; selectedDoc: string | null; onDocSelect: (slug: string) => void; spriteUrl: string }) => {\n  // Group documents by folder and track which is first in each folder\n  const groupedDocs = useCallback(() => {\n    const groups: { [folder: string]: EnhancedMarkdownMeta[] } = {};\n\n    for (const doc of docs) {\n      const folder = doc.folder || '';\n      if (!groups[folder]) {\n        groups[folder] = [];\n      }\n      groups[folder].push(doc);\n    }\n\n    return groups;\n  }, [docs]);\n\n  const groups = groupedDocs();\n\n  return (\n    <div className=\"space-y-1\">\n      {Object.entries(groups).map(([folder, folderDocs]) => {\n        const isRootLevel = folder === '';\n        const folderId = `folder-${folder.replace(/[^a-zA-Z0-9]/g, '-')}`;\n\n        return (\n          <div key={folder || 'root'}>\n            {!isRootLevel && (\n              <div className=\"relative\">\n                <input type=\"checkbox\" id={folderId} className=\"peer hidden\" defaultChecked={true} />\n                <label htmlFor={folderId} className=\"flex w-full cursor-pointer items-center px-3 py-2 text-left text-gray-600 text-sm transition-colors hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-800/50\">\n                  <SpriteIcon<IconName> url={spriteUrl} id=\"ChevronRight\" className=\"mr-2 h-3 w-3 transition-transform duration-200 peer-checked:rotate-90\" />\n                  <span className=\"font-medium capitalize\">{folder}</span>\n                </label>\n\n                <div className=\"ml-6 max-h-0 space-y-0.5 overflow-hidden transition-all duration-300 peer-checked:max-h-96\">\n                  {folderDocs.map(doc => (\n                    <button\n                      key={doc.slug}\n                      type=\"button\"\n                      onClick={() => onDocSelect(doc.slug)}\n                      className={clsx(\n                        'w-full px-3 py-2 text-left text-sm transition-colors focus:outline-none',\n                        selectedDoc === doc.slug\n                          ? 'border-blue-500 border-r-2 bg-blue-50 text-blue-900 dark:border-blue-400 dark:bg-blue-900/20 dark:text-blue-100'\n                          : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800/50'\n                      )}\n                    >\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{doc.title || doc.slug}</div>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {isRootLevel && (\n              <div className=\"space-y-0.5\">\n                {folderDocs.map(doc => (\n                  <button\n                    key={doc.slug}\n                    type=\"button\"\n                    onClick={() => onDocSelect(doc.slug)}\n                    className={clsx(\n                      'w-full px-3 py-2 text-left text-sm transition-colors focus:outline-none',\n                      selectedDoc === doc.slug\n                        ? 'border-blue-500 border-r-2 bg-blue-50 text-blue-900 dark:border-blue-400 dark:bg-blue-900/20 dark:text-blue-100'\n                        : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800/50'\n                    )}\n                  >\n                    <div className=\"font-medium\">{doc.title || doc.slug}</div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n",
    "import { redirect } from 'react-router';\nimport { getMarkdownDocument } from '../markdown-data';\nimport { routesTemplate } from './markdown';\n\n// Enhanced loader for Cloudflare Worker environments\nexport function createMarkdownSlugLoader() {\n  return async function markdownSlugLoader({ params, request }: { params: Record<string, string | undefined>; request: Request }) {\n    const slug = params['*'];\n\n    // Validate slug\n    if (!slug || typeof slug !== 'string' || slug.trim() === '') {\n      throw new Response('Invalid document slug', { status: 400 });\n    }\n\n    // Sanitize slug to prevent directory traversal (allow forward slashes for folder paths)\n    const sanitizedSlug = slug.replace(/[^a-zA-Z0-9-_/]/g, '');\n    if (sanitizedSlug !== slug) {\n      throw new Response('Invalid document slug format', { status: 400 });\n    }\n\n    // Prevent directory traversal attempts\n    if (sanitizedSlug.includes('..') || sanitizedSlug.startsWith('/') || sanitizedSlug.endsWith('/')) {\n      throw new Response('Invalid document slug format', { status: 400 });\n    }\n\n    // Works in both Cloudflare Worker and development environments\n\n    const url = new URL(request.url);\n    const isApiCall = url.searchParams.has('api') || request.headers.get('Accept')?.includes('application/json');\n\n    // Check if the document exists\n    const doc = await getMarkdownDocument(sanitizedSlug, request);\n    if (!doc) {\n      throw new Response('Document not found', { status: 404 });\n    }\n\n    // If it's an API call, return the document data\n    if (isApiCall) {\n      const enhancedFrontmatter = {\n        ...doc.frontmatter,\n        formattedDate: doc.frontmatter.date ? new Date(doc.frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) : undefined,\n      };\n\n      return Response.json({ content: doc.content, frontmatter: enhancedFrontmatter, slug: sanitizedSlug });\n    }\n\n    // Otherwise, redirect to main docs page with fragment\n    return redirect(routesTemplate.docs(sanitizedSlug));\n  };\n}\n"
  ],
  "mappings": "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",
  "debugId": "2960F25AC7413D2D64756E2164756E21",
  "names": []
}