{
  "version": 3,
  "sources": ["../../../src/logger/plugin/logger.plugin.ts"],
  "sourcesContent": [
    "/** biome-ignore-all lint/correctness/noUnusedVariables: WIP */\nimport type { Plugin } from 'vite';\n\nexport interface LoggerPluginOptions {\n  /**\n   * Production mode - determines what gets stripped\n   * @default process.env.NODE_ENV === 'production'\n   */\n  production?: boolean;\n\n  /**\n   * Log levels to strip in production\n   * @default ['debug', 'info', 'notice']\n   */\n  stripLevels?: string[];\n\n  /**\n   * Log levels to keep in production\n   * @default ['warning', 'error', 'critical', 'alert', 'emergency']\n   */\n  keepLevels?: string[];\n\n  /**\n   * Whether to replace calls with void 0 or remove entirely\n   * @default 'remove'\n   */\n  replacementStrategy?: 'remove' | 'noop';\n\n  /**\n   * Logger import patterns to optimize\n   * @default ['@ycore/forge/logger', './logger', '../logger']\n   */\n  loggerPatterns?: string[];\n}\n\nconst DEFAULT_STRIP_LEVELS = ['debug', 'info', 'notice'];\nconst DEFAULT_KEEP_LEVELS = ['warning', 'error', 'critical', 'alert', 'emergency'];\nconst DEFAULT_LOGGER_PATTERNS = ['@ycore/forge/logger', './logger', '../logger'];\n\n/**\n * Vite plugin for optimizing logger calls in production builds\n *\n * Features:\n * - Strips debug/info/notice calls in production\n * - Preserves error/warning/critical calls for monitoring\n * - Uses esbuild's dead code elimination (no terser needed)\n * - Supports inline conditions that get optimized away\n * - Works with both direct imports and destructured imports\n */\nexport function loggerOptimization(options: LoggerPluginOptions = {}): Plugin {\n  const { production = process.env.NODE_ENV === 'production', stripLevels = DEFAULT_STRIP_LEVELS, keepLevels = DEFAULT_KEEP_LEVELS, replacementStrategy = 'remove', loggerPatterns = DEFAULT_LOGGER_PATTERNS } = options;\n\n  const isProd = production;\n  const _shouldOptimize = isProd;\n\n  return {\n    name: 'logger-optimization',\n    enforce: 'pre',\n\n    config(config) {\n      // Optimize esbuild for better dead code elimination\n      if (isProd) {\n        config.esbuild = {\n          ...config.esbuild,\n          drop: ['debugger'],\n          pure: [\n            'logger.debug',\n            'logger.info',\n            'logger.notice',\n            // Also handle destructured imports\n            ...stripLevels.map(level => `${level}`),\n          ],\n          treeShaking: true,\n        };\n      }\n    },\n\n    // Temporarily disable transform to focus on esbuild optimization\n    // transform(code, id) {\n    //   return null;\n    // },\n  };\n}\n"
  ],
  "mappings": ";AAmCA,IAAM,uBAAuB,CAAC,SAAS,QAAQ,QAAQ;AACvD,IAAM,sBAAsB,CAAC,WAAW,SAAS,YAAY,SAAS,WAAW;AACjF,IAAM,0BAA0B,CAAC,uBAAuB,YAAY,WAAW;AAYxE,SAAS,kBAAkB,CAAC,UAA+B,CAAC,GAAW;AAAA,EAC5E,QAAQ,aAAa,MAAuC,cAAc,sBAAsB,aAAa,qBAAqB,sBAAsB,UAAU,iBAAiB,4BAA4B;AAAA,EAE/M,MAAM,SAAS;AAAA,EACf,MAAM,kBAAkB;AAAA,EAExB,OAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IAET,MAAM,CAAC,QAAQ;AAAA,MAEb,IAAI,QAAQ;AAAA,QACV,OAAO,UAAU;AAAA,aACZ,OAAO;AAAA,UACV,MAAM,CAAC,UAAU;AAAA,UACjB,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YAEA,GAAG,YAAY,IAAI,WAAS,GAAG,OAAO;AAAA,UACxC;AAAA,UACA,aAAa;AAAA,QACf;AAAA,MACF;AAAA;AAAA,EAOJ;AAAA;",
  "debugId": "D3EE1B213C3EA4B464756E2164756E21",
  "names": []
}