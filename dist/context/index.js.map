{
  "version": 3,
  "sources": ["../../src/context/context-manager.ts"],
  "sourcesContent": [
    "import type { AppLoadContext, RouterContext, RouterContextProvider } from 'react-router';\nimport type { RequireContextOptions } from './@types/context.types';\n\n/**\n * Get a context value with optional default fallback\n */\nexport function getContext<T>(context: Readonly<AppLoadContext | RouterContextProvider>, contextKey: RouterContext<T>): T | null;\nexport function getContext<T>(context: Readonly<AppLoadContext | RouterContextProvider>, contextKey: RouterContext<T>, defaultValue: T): T;\nexport function getContext<T>(context: Readonly<AppLoadContext | RouterContextProvider>, contextKey: RouterContext<T>, defaultValue?: T): T | null {\n  // @ts-expect-error - AppLoadContext.get returns unknown which is correct, but we know the type from the context key\n  const value = context.get(contextKey);\n\n  if (value === null || value === undefined) {\n    return defaultValue !== undefined ? defaultValue : null;\n  }\n\n  return value;\n}\n\n/**\n * Require a context value, throwing an error if not found - context MUST be present (e.g., from middleware)\n */\nexport function requireContext<T>(context: Readonly<AppLoadContext | RouterContextProvider>, contextKey: RouterContext<T>, options?: RequireContextOptions): NonNullable<T> {\n  // @ts-expect-error - AppLoadContext.get returns unknown which is correct, but we know the type from the context key\n  const value = context.get(contextKey);\n\n  if (value === null || value === undefined) {\n    const contextName = (contextKey as { displayName?: string }).displayName || 'Unknown';\n    const message = options?.errorMessage || `Required context '${contextName}' not found - middleware may have failed`;\n    const status = options?.errorStatus || 500;\n\n    throw new Response(message, { status, statusText: 'Internal Server Error' });\n  }\n\n  return value as NonNullable<T>;\n}\n\n/**\n * Set a context value in React Router context\n */\nexport function setContext<T>(context: Readonly<RouterContextProvider> | RouterContextProvider, contextKey: RouterContext<T>, value: T): void {\n  (context as RouterContextProvider).set(contextKey, value);\n}\n"
  ],
  "mappings": ";AAQO,SAAS,UAAa,CAAC,SAA2D,YAA8B,cAA4B;AAAA,EAEjJ,MAAM,QAAQ,QAAQ,IAAI,UAAU;AAAA,EAEpC,IAAI,UAAU,QAAQ,UAAU,WAAW;AAAA,IACzC,OAAO,iBAAiB,YAAY,eAAe;AAAA,EACrD;AAAA,EAEA,OAAO;AAAA;AAMF,SAAS,cAAiB,CAAC,SAA2D,YAA8B,SAAiD;AAAA,EAE1K,MAAM,QAAQ,QAAQ,IAAI,UAAU;AAAA,EAEpC,IAAI,UAAU,QAAQ,UAAU,WAAW;AAAA,IACzC,MAAM,cAAe,WAAwC,eAAe;AAAA,IAC5E,MAAM,UAAU,SAAS,gBAAgB,qBAAqB;AAAA,IAC9D,MAAM,SAAS,SAAS,eAAe;AAAA,IAEvC,MAAM,IAAI,SAAS,SAAS,EAAE,QAAQ,YAAY,wBAAwB,CAAC;AAAA,EAC7E;AAAA,EAEA,OAAO;AAAA;AAMF,SAAS,UAAa,CAAC,SAAkE,YAA8B,OAAgB;AAAA,EAC3I,QAAkC,IAAI,YAAY,KAAK;AAAA;",
  "debugId": "11A4559278895F7064756E2164756E21",
  "names": []
}