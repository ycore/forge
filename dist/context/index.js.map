{
  "version": 3,
  "sources": ["../../src/context/context-manager.ts"],
  "sourcesContent": [
    "import type { AppLoadContext } from 'react-router';\nimport type { RequireContextOptions } from './@types/context.types';\n\n/**\n * Get a context value with optional default fallback\n *\n * @example\n * const theme = getContext(context, themeContext, 'light');\n */\nexport function getContext<T>(context: AppLoadContext, contextKey: React.Context<T>): T | null;\nexport function getContext<T>(context: AppLoadContext, contextKey: React.Context<T>, defaultValue: T): T;\nexport function getContext<T>(context: AppLoadContext, contextKey: React.Context<T>, defaultValue?: T): T | null {\n  // @ts-expect-error - AppLoadContext.get returns unknown which is correct, but we know the type from the context key\n  const value = context.get(contextKey);\n\n  if (value === null || value === undefined) {\n    return defaultValue !== undefined ? defaultValue : null;\n  }\n\n  return value;\n}\n\n/**\n * Require a context value, throwing an error if not found\n * Use when the context MUST be present (e.g., from middleware)\n *\n * @example\n * const user = requireContext(context, userContext, {\n *   errorMessage: 'Authentication middleware not configured',\n *   errorStatus: 500\n * });\n */\nexport function requireContext<T>(\n  context: AppLoadContext,\n  contextKey: React.Context<T>,\n  options?: RequireContextOptions\n): NonNullable<T> {\n  // @ts-expect-error - AppLoadContext.get returns unknown which is correct, but we know the type from the context key\n  const value = context.get(contextKey);\n\n  if (value === null || value === undefined) {\n    const contextName = (contextKey as { displayName?: string }).displayName || 'Unknown';\n    const message = options?.errorMessage || `Required context '${contextName}' not found - middleware may not have run`;\n    const status = options?.errorStatus || 500;\n\n    throw new Response(message, { status, statusText: 'Internal Server Error' });\n  }\n\n  return value as NonNullable<T>;\n}\n"
  ],
  "mappings": ";AAWO,SAAS,UAAa,CAAC,SAAyB,YAA8B,cAA4B;AAAA,EAE/G,MAAM,QAAQ,QAAQ,IAAI,UAAU;AAAA,EAEpC,IAAI,UAAU,QAAQ,UAAU,WAAW;AAAA,IACzC,OAAO,iBAAiB,YAAY,eAAe;AAAA,EACrD;AAAA,EAEA,OAAO;AAAA;AAaF,SAAS,cAAiB,CAC/B,SACA,YACA,SACgB;AAAA,EAEhB,MAAM,QAAQ,QAAQ,IAAI,UAAU;AAAA,EAEpC,IAAI,UAAU,QAAQ,UAAU,WAAW;AAAA,IACzC,MAAM,cAAe,WAAwC,eAAe;AAAA,IAC5E,MAAM,UAAU,SAAS,gBAAgB,qBAAqB;AAAA,IAC9D,MAAM,SAAS,SAAS,eAAe;AAAA,IAEvC,MAAM,IAAI,SAAS,SAAS,EAAE,QAAQ,YAAY,wBAAwB,CAAC;AAAA,EAC7E;AAAA,EAEA,OAAO;AAAA;",
  "debugId": "05FA7E380AD5B74464756E2164756E21",
  "names": []
}