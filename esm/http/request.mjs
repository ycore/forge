let r=({protocol:r,host:e})=>`${r}://${e}`;function e(r,t=["current"]){return n.extract(r,t)}function t(r,e){return n.extractMultiple(r,e)}function o(r){return r.headers.get("x-forwarded-host")??r.headers.get("host")??new URL(r.url).host}function l(r){let e=r.headers.get("x-forwarded-proto");return e?e.split(",")[0].trim().replace(/:$/,""):"on"===r.headers.get("x-forwarded-ssl")?"https":new URL(r.url).protocol.replace(/:$/,"")}let n={fromUrl(e){try{let t=new URL(e);return r({protocol:t.protocol.replace(/:$/,""),host:t.host})}catch{return null}},current:e=>r({protocol:l(e),host:o(e)}),referer(r){let e=r.headers.get("referer")??r.headers.get("referrer")??r.referrer;return e?this.fromUrl(e):null},origin(r){let e=r.headers.get("origin");return e?this.fromUrl(e):null},extract(r,e){for(let t of e.includes("current")?e:[...e,"current"]){let e=this[t](r);if(e)return e}return null},extractMultiple(r,e){let t=[];for(let o of e){let l=this[o](r);console.log({sources:e},{url:l}),l&&!t.some(r=>r===l)&&t.push(l)}return t}};export{o as getCurrentHost,l as getCurrentProtocol,e as getDomainUrl,t as getDomainUrls};